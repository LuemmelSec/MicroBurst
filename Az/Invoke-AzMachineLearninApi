<#
    File: Invoke-AzMachineLearninApi.ps1
    Author: Christian Bortone (@xybytes), - 2025
    Description: PowerShell function designed to securely retrieve workspace information, Azure Managed Identity token, and storage account key by leveraging compute instance certificate and key for authentication.
#>

function Invoke-AzAIRequest {
    param (
        [string]$SubscriptionId,
        [string]$ResourceGroupName,
        [string]$WorkspaceName,
        [string]$ClusterName,
        [string]$NodeId,
        [string]$PfxPath,
        [string]$PfxPassword
    )

    # Check Values
    $params = @{
        SubscriptionId = $SubscriptionId
        ResourceGroupName = $ResourceGroupName
        WorkspaceName = $WorkspaceName
        ClusterName = $ClusterName
        NodeId = $NodeId
        PfxPath = $PfxPath
        PfxPassword = $PfxPassword
    }

    foreach ($key in $params.Keys) {
        if (-not $params[$key]) {
            Write-Error "$key is not defined or is empty."
            return
        }
    }

    # Request URL
    $url = ("https://eastus2.cert.api.azureml.ms/xdsbatchai/hosttoolapi/subscriptions/{0}/resourceGroups/{1}/workspaces/{2}/clusters/{3}/nodes/{4}?api-version=2018-02-01" -f `
        $SubscriptionId, `
        $ResourceGroupName, `
        $WorkspaceName, `
        $ClusterName, `
        $NodeId, `
        $ApiVersion
    )

    Write-Host "URL: $url"

    # Request Body
    $body_getworkspace = @{
        RequestType = "getworkspace"
    } | ConvertTo-Json -Depth 10

    $body_getaadtoken = @{
        RequestType = "getaadtoken"
        RequestBody = '{"resource":"https://management.azure.com"}'
    } | ConvertTo-Json -Depth 10 -Compress


    $body_getworkspacesecrets = @{
        RequestType = "getworkspacesecrets"
    } | ConvertTo-Json -Depth 10 -Compress

    # HTTP Headers
    $headers = @{
        "Accept" = "application/json"
        "Host" = "eastus2.cert.api.azureml.ms"
    }

    # Load PFX
    $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $cert.Import($PfxPath, $PfxPassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::DefaultKeySet)

    
    # POST Request
    $getworkspace = Invoke-RestMethod -Uri $url -Method Post -Body $body_getworkspace -ContentType "application/json" -Certificate $cert -Headers $headers 
    $getaadtoken = Invoke-RestMethod -Uri $url -Method Post -Body $body_getaadtoken -ContentType "application/json" -Certificate $cert -Headers $headers 
    $getworkspacesecrets = Invoke-RestMethod -Uri $url -Method Post -Body $body_getworkspacesecrets -ContentType "application/json" -Certificate $cert -Headers $headers

    
    $Getworkspace = (($getworkspace | Select-Object -ExpandProperty response) | ConvertFrom-Json)
    $Token = ($getaadtoken[0].response | ConvertFrom-Json).Token
    $AccountKeyJWE = ($getworkspacesecrets[0].response | ConvertFrom-Json).AccountKeyJWE

    return [PSCustomObject]@{
        Name                        = $Getworkspace.name
        ID                          = $Getworkspace.id
        WorkspaceId                 = $Getworkspace.properties.workspaceId
        Location                    = $Getworkspace.location
        StorageAccount              = $Getworkspace.properties.storageAccount
        PublicNetworkAccess         = $Getworkspace.properties.publicNetworkAccess
        KeyVault                    = $Getworkspace.properties.keyVault
        ipAllowlist                 = $Getworkspace.properties.ipAllowlist
        FriendlyName                = $Getworkspace.properties.friendlyName
        ProvisioningState           = $Getworkspace.properties.provisioningState
        TenantId                    = $Getworkspace.properties.tenantId
        ContainerRegistry           = $Getworkspace.properties.containerRegistry
        NotebookInfo                = $Getworkspace.properties.notebookInfo
        DiscoveryUrl                = $Getworkspace.properties.discoveryUrl
        MlFlowTrackingUri           = $Getworkspace.properties.mlFlowTrackingUri
        EnableDataIsolation         = $Getworkspace.properties.enableDataIsolation
        CredentialType              = $Getworkspace.properties.credentialType
        Token                       = $Token
        AccountKeyJWE               = $AccountKeyJWE
    }

}